#!/usr/bin/python3
"""
Factorize as many numbers as possible into a product of two smaller numbers.

   Usage: factors <file>
       where <file> is a file containing natural numbers to factor.
       One number per line
       You can assume that all lines will be valid natural numbers\
               greater than 1
       You can assume that there will be no empy line, and no space\
       before and after the valid number
       The file will always end with a new line
   Output format: n=p*q
       one factorization per line
       p and q don’t have to be prime numbers
       See example
   You can work on the numbers of the file in the order of your choice
   Your program should run without any dependency: You will not be ablei\
       to install anything on the machine we will run your program on
   Time limit: Your program will be killed after 5 seconds\
       if it hasn’t finish
   Push all your scripts, source code, etc… to your repository
"""


from sys import argv
import math
"""gets the first two factors of any number"""


def is_prime(num):
    """checks if a number is prime"""
    i = 3
    if num % 2 == 0:
        return False
    while i * i <= num:
         if num % i == 0:
            return False
         i += 2
    return True


def factory(num):
   """This factor function gets the factors of a number & prints them out"""
   if num % 2 == 0:
       i = 2
       print("{}={}*{}".format(num, int(num/i), i))
   else:
       sq = math.sqrt(num)
       if sq % 1 == 0:
          print("{}={}*{}".format(num, sq, int(num/sq)))
          return
      sq = int(sq) + 1
      
        for i in range(3, sq, +2):
            if num % i == 0:
               if is_prime(i):
                  print("{}={}*{}".format(num, int(num/i), i))
                  return
               

def factors(filename):
   """read_file"""
   with open(filename, encoding="utf-8") as my_file:
       for i in my_file.readlines():
           n = int(i)
           result = factory(n)
if __name__ == "__main__":
    factors(argv[1])
